import socket
import sys
import ipaddress
from ipwhois import IPWhois
import dns.resolver
import requests
import argparse
from datetime import datetime
import concurrent.futures
import json
import time
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DNS_RESOLVERS = [
    '8.8.8.8',        # Google DNS
    '1.1.1.1',        # Cloudflare DNS
    '9.9.9.9',        # Quad9 DNS
    '208.67.222.222', # OpenDNS
]
REQUEST_TIMEOUT = 30
MAX_RETRIES = 3
RETRY_DELAY = 2

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–∞–∑—ã ASN
asn_database = {}

def load_asn_database():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É ASN –∏–∑ —Ñ–∞–π–ª–∞."""
    global asn_database
    try:
        with open('asn_database.json', 'r', encoding='utf-8') as f:
            asn_database = json.load(f)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ ASN: {len(asn_database)} –∑–∞–ø–∏—Å–µ–π")
    except FileNotFoundError:
        print("–§–∞–π–ª asn_database.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –±–∞–∑–∞ ASN.")
        asn_database = {}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã ASN: {e}")
        asn_database = {}

def retry_request(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    def wrapper(*args, **kwargs):
        for attempt in range(MAX_RETRIES):
            try:
                result = func(*args, **kwargs)
                if result is not None:
                    return result
                elif attempt == MAX_RETRIES - 1:
                    print(f"–í—Å–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è {func.__name__}")
                    return None
            except (requests.exceptions.RequestException, Exception) as e:
                if attempt == MAX_RETRIES - 1:
                    print(f"–í—Å–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è {func.__name__}: {e}")
                    return None
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                time.sleep(RETRY_DELAY * (attempt + 1))
        return None
    return wrapper

@retry_request
def get_domain_ips(domain):
    """–ü–æ–ª—É—á–∞–µ—Ç IPv4-–∞–¥—Ä–µ—Å–∞ –¥–æ–º–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º multiple DNS-—Ä–µ–∑–æ–ª–≤–µ—Ä–æ–≤."""
    ips = set()
    
    for resolver_ip in DNS_RESOLVERS:
        try:
            resolver = dns.resolver.Resolver()
            resolver.nameservers = [resolver_ip]
            answers = resolver.resolve(domain, 'A')
            for rdata in answers:
                ips.add(str(rdata))
            print(f"DNS {resolver_ip} –≤–µ—Ä–Ω—É–ª {len(answers)} IP-–∞–¥—Ä–µ—Å–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DNS {resolver_ip}: {e}")
    
    return list(ips)

@retry_request
def get_cidr_from_rdap(ip):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç CIDR —á–µ—Ä–µ–∑ RDAP-–∑–∞–ø—Ä–æ—Å—ã."""
    try:
        obj = IPWhois(ip)
        results = obj.lookup_rdap(depth=1)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å CIDR —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        cidr = results.get('asn_cidr', None)
        if not cidr:
            network = results.get('network', {})
            cidr = network.get('cidr', None)
        
        if cidr:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º CIDR
            net = ipaddress.ip_network(cidr, strict=False)
            result = str(net)
            print(f"–ü–æ–ª—É—á–µ–Ω CIDR –¥–ª—è {ip} —á–µ—Ä–µ–∑ RDAP: {result}")
            return result
        else:
            result = f"{ip}/32"
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å CIDR –¥–ª—è {ip}, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {result}")
            return result
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ RDAP-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è IP {ip}: {e}")
        result = f"{ip}/32"
        return result

@retry_request
def get_asn_info_from_ipinfo(asn):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ ipinfo.io API."""
    try:
        url = f"https://ipinfo.io/AS{asn}/json"
        response = requests.get(url, timeout=REQUEST_TIMEOUT)
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç ipinfo.io –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            formatted_data = {
                'name': data.get('name', ''),
                'prefixes': data.get('prefixes', [])
            }
            print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± ASN {asn} –∏–∑ ipinfo.io")
            return formatted_data
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ASN {asn} –∏–∑ ipinfo.io (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± ASN {asn} –∏–∑ ipinfo.io: {e}")
        return None

def get_asn_info(asn):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ."""
    asn_str = str(asn)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É ASN
    if asn_str in asn_database:
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–ª—è ASN {asn}")
        return asn_database[asn_str]
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ASN {asn} –∏–∑ ipinfo.io")
    return get_asn_info_from_ipinfo(asn)

def aggregate_cidrs(cidr_list):
    """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ CIDR-–±–ª–æ–∫–æ–≤."""
    if not cidr_list:
        return []

    networks = []
    for cidr in cidr_list:
        try:
            net = ipaddress.ip_network(cidr, strict=False)
            networks.append(net)
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CIDR {cidr}: {e}")

    try:
        aggregated_nets = list(ipaddress.collapse_addresses(networks))
        result = [str(net) for net in aggregated_nets]
        print(f"–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(cidr_list)} CIDR –≤ {len(result)} –±–ª–æ–∫–æ–≤")
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–µ—Ç–µ–π: {e}")
        return [str(net) for net in networks]

def cidr_to_keenetic_command(cidr):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç CIDR –≤ –∫–æ–º–∞–Ω–¥—É –¥–ª—è Keenetic .bat —Ñ–∞–π–ª–∞."""
    try:
        net = ipaddress.ip_network(cidr)
        network_address = net.network_address
        netmask = net.netmask
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è .bat —Ñ–∞–π–ª–∞ Keenetic
        return f"route ADD {network_address} MASK {netmask} 0.0.0.0"
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è CIDR {cidr} –¥–ª—è Keenetic: {e}")
        return None

def main(domain):
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞: {domain}")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É ASN
    load_asn_database()

    # 1. –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å–∞ –¥–æ–º–µ–Ω–∞ —Å multiple DNS
    ips = get_domain_ips(domain)
    if not ips:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞.")
        return

    print(f"–ù–∞–π–¥–µ–Ω—ã IP-–∞–¥—Ä–µ—Å–∞: {', '.join(ips)}")

    # 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ IP –æ–ø—Ä–µ–¥–µ–ª—è–µ–º CIDR (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
    cidrs_found = set()
    asn_set = set()
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
        # –ü–æ–ª—É—á–∞–µ–º CIDR —á–µ—Ä–µ–∑ RDAP
        future_to_ip = {executor.submit(get_cidr_from_rdap, ip): ip for ip in ips}
        for future in concurrent.futures.as_completed(future_to_ip):
            ip = future_to_ip[future]
            try:
                cidr = future.result()
                if cidr:
                    cidrs_found.add(cidr)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ IP {ip}: {e}")

    # 3. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ASN
    print("\nüîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –∞–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º")
    asn_cidrs = set()
    
    # –ü–æ–ª—É—á–∞–µ–º ASN –¥–ª—è –∫–∞–∂–¥–æ–≥–æ CIDR
    for cidr in cidrs_found:
        try:
            net = ipaddress.ip_network(cidr)
            ip = str(net.network_address)
            obj = IPWhois(ip)
            results = obj.lookup_rdap(depth=1)
            asn = results.get('asn', None)
            if asn:
                asn_set.add(asn)
                print(f"–ù–∞–π–¥–µ–Ω ASN {asn} –¥–ª—è CIDR {cidr}")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ASN –¥–ª—è CIDR {cidr}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ASN –¥–ª—è CIDR {cidr}: {e}")
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ ASN –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
    for asn in asn_set:
        asn_info = get_asn_info(asn)
        if asn_info and 'prefixes' in asn_info:
            for prefix in asn_info['prefixes']:
                try:
                    net = ipaddress.ip_network(prefix)
                    if net.version == 4:  # –¢–æ–ª—å–∫–æ IPv4
                        asn_cidrs.add(prefix)
                        print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å {prefix} –¥–ª—è ASN {asn}")
                except ValueError as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ {prefix} –¥–ª—è ASN {asn}: {e}")
                    continue
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ—Ñ–∏–∫—Å–∞—Ö –¥–ª—è ASN {asn}")
    
    cidrs_found.update(asn_cidrs)
    print(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö CIDR —á–µ—Ä–µ–∑ ASN: {len(asn_cidrs)}")

    # 4. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º CIDR-–±–ª–æ–∫–∏
    aggregated_cidrs = aggregate_cidrs(list(cidrs_found))

    # 5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    amneziawg_allowed_ips = ", ".join(aggregated_cidrs)

    keenetic_commands = []
    for cidr in aggregated_cidrs:
        command = cidr_to_keenetic_command(cidr)
        if command:
            keenetic_commands.append(command)

    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã
    current_date = datetime.now().strftime("%Y-%m-%d")
    filename_amnezia = f"{domain}_amneziawg_{current_date}.txt"
    filename_keenetic = f"{domain}_keenetic_{current_date}.bat"

    try:
        # –§–∞–π–ª –¥–ª—è AmneziaWG
        with open(filename_amnezia, 'w', encoding='utf-8') as f:
            f.write(amneziawg_allowed_ips)
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è AmneziaWG —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename_amnezia}")

        # .bat —Ñ–∞–π–ª –¥–ª—è Keenetic (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
        with open(filename_keenetic, 'w', encoding='utf-8') as f:
            for command in keenetic_commands:
                f.write(command + "\n")
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è Keenetic —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename_keenetic}")
        print("üí° –§–∞–π–ª .bat –≥–æ—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–æ—É—Ç–µ—Ä Keenetic")

    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
        return

    # 7. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "="*50)
    print(f"–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –î–û–ú–ï–ù–ê: {domain}")
    print("="*50)
    print(f"–ù–∞–π–¥–µ–Ω–æ IP-–∞–¥—Ä–µ—Å–æ–≤: {len(ips)}")
    print(f"–ù–∞–π–¥–µ–Ω–æ CIDR-–±–ª–æ–∫–æ–≤ –¥–æ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {len(cidrs_found)}")
    print(f"CIDR-–±–ª–æ–∫–æ–≤ –ø–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {len(aggregated_cidrs)}")
    print(f"–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: {len(cidrs_found) - len(aggregated_cidrs)} –±–ª–æ–∫–æ–≤")
    print(f"–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (ASN): {len(asn_set)}")
    print(f"ASN: {', '.join(str(asn) for asn in asn_set)}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CIDR-–±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞.')
    parser.add_argument('domain', type=str, help='–î–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com)')
    args = parser.parse_args()

    main(args.domain)